if exists (select * from sysobjects where name = 'F_CTS_CROSS_PRODUCT_TRX_AGG_TOP_3_ACCOUNT_ORD')
EXEC sp_rename 'db_instance_UDM_CDS.F_CTS_CROSS_PRODUCT_TRX_AGG_TOP_3_ACCOUNT_ORD', 'F_CTS_CROSS_PRODUCT_TRX_AGG_TOP_3_ACCOUNT_ORD_HF_BKP', 'OBJECT';
go
if exists (select * from sysobjects where name = 'F_CTS_CROSS_PRODUCT_TRX_AGG_TOP_3_ACCOUNT_EXE')
EXEC sp_rename 'db_instance_UDM_CDS.F_CTS_CROSS_PRODUCT_TRX_AGG_TOP_3_ACCOUNT_EXE', 'F_CTS_CROSS_PRODUCT_TRX_AGG_TOP_3_ACCOUNT_EXE_HF_BKP', 'OBJECT';
go
if exists (select * from sysobjects where name = 'F_CTS_CROSS_PRODUCT_TRX_RECORD')
EXEC sp_rename 'db_instance_UDM_CDS.F_CTS_CROSS_PRODUCT_TRX_RECORD', 'F_CTS_CROSS_PRODUCT_TRX_RECORD_HF_BKP', 'OBJECT';
go
if exists (select * from sysobjects where name = 'F_CTS_CROSS_PRODUCT_EXEC_AGG')
EXEC sp_rename 'db_instance_UDM_CDS.F_CTS_CROSS_PRODUCT_EXEC_AGG', 'F_CTS_CROSS_PRODUCT_EXEC_AGG_HF_BKP', 'OBJECT';
go
if exists (select * from sysobjects where name = 'V_LINKED_TRANSACTIONS')
EXEC sp_rename 'db_instance_UDM_CDS.V_LINKED_TRANSACTIONS', 'V_LINKED_TRANSACTIONS_HF_BKP', 'OBJECT';
go

if exists (select * from sysobjects where name = 'F_CTS_CROSS_PRODUCT_TRX_AGG_TOP_3_ACCOUNT_EXE')
 drop function db_instance_UDM_CDS.F_CTS_CROSS_PRODUCT_TRX_AGG_TOP_3_ACCOUNT_EXE
go

create function db_instance_UDM_CDS.F_CTS_CROSS_PRODUCT_TRX_AGG_TOP_3_ACCOUNT_EXE
(@P_PRODUCT_KEY AS VARCHAR(50),@P_ISSUE_DATE_TIME AS VARCHAR(50),@ISIN_ID AS varchar(20))
RETURNS TABLE
RETURN
SELECT TOP 3 ACCOUNT.ACCOUNT_KEY
,abs(sum((CASE PT.PRODUCT_TYPE_CD
WHEN 'OPT' THEN (CASE EXECUTION.DIRECTION_CD+' '+ EXECUTION.CALL_PUT_CD WHEN 'B CALL' THEN 1 WHEN 'B PUT' THEN  -1 WHEN 'S CALL' THEN  -1
WHEN 'S PUT' THEN 1
END)
ELSE (CASE EXECUTION.DIRECTION_CD
WHEN 'B' THEN 1
WHEN 'S' THEN -1
END)
END)*EXE_QUANTITY*PROD.CONTRACT_SIZE)) as NET_TRADING_ACTIVITY
From db_instance_UDM_CDS.V_EXECUTION EXECUTION
JOIN db_instance_UDM_CDS.V_ACCOUNT ACCOUNT ON EXECUTION.ACCOUNT_SK = ACCOUNT.ENTITY_SK
JOIN db_instance_UDM_CDS.V_PRODUCT PROD ON PROD.ENTITY_SK = EXECUTION.PRODUCT_SK
JOIN db_instance_UDM_CDS.V_PRODUCT INPUT_PROD on INPUT_PROD.PRODUCT_KEY = @P_PRODUCT_KEY
LEFT JOIN db_instance_UDM_CDS.V_PRODUCT_TYPE PT ON (PROD.PRODUCT_TYPE_SK = PT.ENTITY_SK)
where EXECUTION.DAY_SK  in  (select DAY_SK from db_instance_UDM_CDS.V_EXECUTION where EXECUTION.EXECUTION_GLOBAL_DATE_TIME <= @P_ISSUE_DATE_TIME)
and EXECUTION.EXECUTION_GLOBAL_DATE_TIME <= @P_ISSUE_DATE_TIME
and EXECUTION.EXECUTION_GLOBAL_DATE_TIME >= cast( @P_ISSUE_DATE_TIME as date)
Group by ACCOUNT.ACCOUNT_KEY
order by NET_TRADING_ACTIVITY desc
go

if exists (select * from sysobjects where name = 'F_CTS_CROSS_PRODUCT_TRX_AGG_TOP_3_ACCOUNT_ORD')
 drop function db_instance_UDM_CDS.F_CTS_CROSS_PRODUCT_TRX_AGG_TOP_3_ACCOUNT_ORD
go

create function db_instance_UDM_CDS.F_CTS_CROSS_PRODUCT_TRX_AGG_TOP_3_ACCOUNT_ORD
(@P_PRODUCT_KEY AS VARCHAR(50),@P_ISSUE_DATE_TIME AS VARCHAR(50),@ISIN_ID AS varchar(20))
RETURNS TABLE
RETURN
   SELECT TOP 3 ACCOUNT.ACCOUNT_KEY
,abs(sum((CASE PT.PRODUCT_TYPE_CD
WHEN 'OPT' THEN (CASE ORD.DIRECTION_CD+' '+ ORD.CALL_PUT_CD WHEN 'B CALL' THEN 1 WHEN 'B PUT' THEN  -1 WHEN 'S CALL' THEN  -1
WHEN 'S PUT' THEN 1
END)
ELSE (CASE ORD.DIRECTION_CD
WHEN 'B' THEN 1
WHEN 'S' THEN -1
END)
END)*QUANTITY*PROD.CONTRACT_SIZE)) as NET_TRADING_ACTIVITY
From db_instance_UDM_CDS.V_ORDER_VERSION ORD
JOIN db_instance_UDM_CDS.V_ACCOUNT ACCOUNT ON ORD.ACCOUNT_SK = ACCOUNT.ENTITY_SK
JOIN db_instance_UDM_CDS.V_PRODUCT PROD ON PROD.ENTITY_SK = ORD.PRODUCT_SK
JOIN db_instance_UDM_CDS.V_PRODUCT INPUT_PROD on INPUT_PROD.PRODUCT_KEY = @P_PRODUCT_KEY
LEFT JOIN db_instance_UDM_CDS.V_PRODUCT_TYPE PT ON (PROD.PRODUCT_TYPE_SK = PT.ENTITY_SK)
where ORD.DAY_SK  in  (select DAY_SK from db_instance_UDM_CDS.V_ORDER_VERSION where ORDER_GLOBAL_DATE_TIME  <= @P_ISSUE_DATE_TIME)
and ORD.ORDER_GLOBAL_DATE_TIME <= @P_ISSUE_DATE_TIME
and ORD.ORDER_GLOBAL_DATE_TIME >= cast( @P_ISSUE_DATE_TIME as date)
Group by ACCOUNT.ACCOUNT_KEY
order by NET_TRADING_ACTIVITY desc
go

if exists (select * from sysobjects where name = 'F_CTS_CROSS_PRODUCT_TRX_RECORD')
 drop function db_instance_UDM_CDS.F_CTS_CROSS_PRODUCT_TRX_RECORD
go

create function db_instance_UDM_CDS.F_CTS_CROSS_PRODUCT_TRX_RECORD
(@P_PRODUCT_KEY AS VARCHAR(50),@P_ACCOUNT_KEY AS VARCHAR(50),@P_ISSUE_DATE_TIME AS VARCHAR(50))
RETURNS @rtnTable TABLE
(
ICON varchar(50),
TRX_TYPE varchar(50),
TRANSACTION_ID varchar(255),
LOCAL_DATE_TIME DATETIME2(7),
PRODUCT_KEY varchar(50),
ACCOUNT_ID varchar(50),
DATE_TIME DATETIME2(7),
SYMBOL varchar(50),
SIDE varchar(255),
QUANTITY float,
ASSET_CLASS varchar(50),
PRICE float,
CCY varchar(50),
COUNTERPARTY varchar(50),
EXCHANGE varchar(50),
ORDER_TYPE varchar(255),
TIME_IN_FORCE varchar(255),
CALL_PUT varchar(50),
TOTAL_TRADING_ACTIVITY float,
NET_TRADING_ACTIVITY float,
UNDERLYING_SEC_PRODUCT_KEY varchar(50)
)
AS
BEGIN
DECLARE @UNDERLYING_ISIN varchar(20);
SELECT @UNDERLYING_ISIN = UNDERLYING_SEC_PRODUCT_KEY FROM db_instance_UDM_CDS.V_PRODUCT WHERE PRODUCT_KEY = @P_PRODUCT_KEY;
DECLARE @ISIN_ID varchar(20);
SELECT @ISIN_ID = ISIN_ID FROM db_instance_UDM_CDS.V_PRODUCT WHERE PRODUCT_KEY = @P_PRODUCT_KEY;
DECLARE @topThreeExecAccount TABLE ([account_key_temp] VARCHAR(50));
   DECLARE @topThreeOrdAccount TABLE ([account_key_temp] VARCHAR(50));
   IF @UNDERLYING_ISIN IS NULL
   BEGIN
INSERT INTO @topThreeExecAccount([account_key_temp])
   select ACCOUNT_KEY from db_instance_UDM_CDS.[F_CTS_CROSS_PRODUCT_TRX_AGG_TOP_3_ACCOUNT_EXE](@P_PRODUCT_KEY, @P_ISSUE_DATE_TIME,@ISIN_ID);
   INSERT INTO @topThreeOrdAccount([account_key_temp])
   select ACCOUNT_KEY from db_instance_UDM_CDS.[F_CTS_CROSS_PRODUCT_TRX_AGG_TOP_3_ACCOUNT_ORD](@P_PRODUCT_KEY, @P_ISSUE_DATE_TIME,@ISIN_ID);
INSERT INTO @rtnTable
SELECT DISTINCT
(SELECT CASE TA.TRANSACTION_ACTION_CD
WHEN 'NEW' THEN 'New '
WHEN 'MOD' THEN 'Modify '
WHEN 'CAN' THEN 'Cancel '
END) +D.DIRECTION_DESC +' Order' as ICON,
 'Order' as TRX_TYPE,
ORD.MARKET_ORDER_ID as TRANSACTION_ID,
ORD.ORDER_LOCAL_DATE_TIME as LOCAL_DATE_TIME,
PROD.PRODUCT_KEY as PRODUCT_KEY,
ACCOUNT.ACCOUNT_KEY as ACCOUNT_ID,
ORD.ORDER_GLOBAL_DATE_TIME as DATE_TIME,
PROD.SYMBOL as SYMBOL,
D.DIRECTION_DESC as SIDE,
ORD.QUANTITY as QUANTITY,
PT.PRODUCT_TYPE_DESC as ASSET_CLASS,
(SELECT CASE PT.PRODUCT_TYPE_CD
WHEN 'OPT' THEN ORD.ORIG_CURR_STRIKE_PRICE
ELSE ORD.ORIG_CURR_LIMIT_PRICE
END) as PRICE,
CURR.CURRENCY_CD as CCY,
null as COUNTERPARTY, --?
EXCH.EXCHANGE_CD as EXCHANGE,
OT.ORDER_TYPE_DESC as ORDER_TYPE,
TERM.ORDER_TERM_DESC as TIME_IN_FORCE,
ORD.CALL_PUT_CD as CALL_PUT,
QUANTITY*PROD.CONTRACT_SIZE as TOTAL_TRADING_ACTIVITY,
(SELECT CASE PT.PRODUCT_TYPE_CD
WHEN 'OPT' THEN ( SELECT CASE D.DIRECTION_DESC+' '+ORD.CALL_PUT_CD
WHEN 'Buy CALL' THEN 1
WHEN 'Buy PUT' THEN  -1
WHEN 'Sell CALL' THEN  -1
WHEN 'Sell PUT' THEN 1
END)
ELSE (SELECT CASE D.DIRECTION_DESC
WHEN 'Buy' THEN 1
WHEN 'Sell' THEN -1
  END)
END)*QUANTITY*PROD.CONTRACT_SIZE as NET_TRADING_ACTIVITY,
(case when PROD.UNDERLYING_SEC_PRODUCT_KEY IS NULL then PROD.PRODUCT_KEY
   else PROD.UNDERLYING_SEC_PRODUCT_KEY
   end )as UNDERLYING_SEC_PRODUCT_KEY
FROM db_instance_UDM_CDS.V_ORDER_VERSION ORD
JOIN db_instance_UDM_CDS.V_PRODUCT PROD on ORD.PRODUCT_SK = PROD.ENTITY_SK
JOIN db_instance_UDM_CDS.V_PRODUCT INPUT_PROD on INPUT_PROD.PRODUCT_KEY = @P_PRODUCT_KEY
LEFT JOIN db_instance_UDM_CDS.V_ENTITY UNDER_PROD on ((PROD.UNDERLYING_SEC_PRODUCT_SK = UNDER_PROD.ENTITY_SK) OR (PROD.PRODUCT_KEY = UNDER_PROD.ENTITY_KEY))
JOIN db_instance_UDM_CDS.V_DAY DAYT ON DAYT.DAY_SK = ORD.DAY_SK
LEFT JOIN db_instance_UDM_CDS.V_TRANSACTION_ACTION TA on ORD.TRANSACTION_ACTION_SK=TA.ENTITY_SK
LEFT JOIN db_instance_UDM_CDS.V_DIRECTION D ON (ORD.DIRECTION_SK = D.ENTITY_SK)
LEFT JOIN db_instance_UDM_CDS.V_ORDER_TYPE OT ON (ORD.ORDER_TYPE_SK = OT.ENTITY_SK)
LEFT JOIN db_instance_UDM_CDS.V_ORDER_TERM TERM ON (ORD.ORDER_TERM_SK = TERM.ENTITY_SK)
LEFT JOIN db_instance_UDM_CDS.V_ACCOUNT ACCOUNT ON (ORD.ACCOUNT_SK = ACCOUNT.ENTITY_SK)
JOIN db_instance_UDM_CDS.ACCOUNT ACCT ON ACCOUNT.ACCOUNT_KEY=ACCT.ACCOUNT_KEY
LEFT JOIN db_instance_UDM_CDS.V_CURRENCY CURR ON (ORD.ORIG_CURR_SK = CURR.ENTITY_SK)
LEFT JOIN db_instance_UDM_CDS.V_EXCHANGE EXCH ON (ORD.EXCHANGE_SK = EXCH.ENTITY_SK)
LEFT JOIN db_instance_UDM_CDS.V_PRODUCT_TYPE PT ON (PROD.PRODUCT_TYPE_SK = PT.ENTITY_SK)
WHERE (PROD.UNDERLYING_SEC_PRODUCT_KEY = @ISIN_ID OR PROD.ISIN_ID = @ISIN_ID)
and (ACCT.ACCOUNT_KEY = @P_ACCOUNT_KEY or ACCT.ACCOUNT_KEY in (select account_key_temp from @topThreeOrdAccount))
and ORD.DAY_SK  in  (select DAY_SK from db_instance_UDM_CDS.V_ORDER_VERSION where ORDER_GLOBAL_DATE_TIME  <= @P_ISSUE_DATE_TIME)
and ORD.ORDER_GLOBAL_DATE_TIME <= @P_ISSUE_DATE_TIME
and ORD.ORDER_GLOBAL_DATE_TIME >= cast( @P_ISSUE_DATE_TIME as date)
UNION
SELECT DISTINCT
(SELECT CASE TA.TRANSACTION_ACTION_CD
WHEN 'NEW' THEN 'New '
WHEN 'MOD' THEN 'Modify '
WHEN 'CAN' THEN 'Cancel '
END)+D.DIRECTION_DESC+' Execution' as ICON,
   'Execution' as TRX_TYPE,
EXECUTION.EXECUTION_SOURCE_ID as TRANSACTION_ID,
EXECUTION.EXECUTION_LOCAL_DATE_TIME as LOCAL_DATE_TIME,
PROD.PRODUCT_KEY as PRODUCT_KEY,
ACCOUNT.ACCOUNT_KEY as ACCOUNT_ID,
EXECUTION.EXECUTION_GLOBAL_DATE_TIME as DATE_TIME,
PROD.SYMBOL as SYMBOL,
D.DIRECTION_DESC as SIDE,
EXECUTION.EXE_QUANTITY as QUANTITY,
PT.PRODUCT_TYPE_DESC as ASSET_CLASS,
(SELECT CASE PT.PRODUCT_TYPE_CD
WHEN 'OPT' THEN EXECUTION.ORIG_CURR_STRIKE_PRICE
ELSE EXECUTION.BASE_CURR_EXE_PRICE
END) as PRICE,
CURR.CURRENCY_CD as CCY,
null as COUNTERPARTY, --?
EXCH.EXCHANGE_CD as EXCHANGE,
null as ORDER_TYPE,
null as  TIME_IN_FORCE,
EXECUTION.CALL_PUT_CD as CALL_PUT,
EXE_QUANTITY*PROD.CONTRACT_SIZE as TOTAL_TRADING_ACTIVITY,
(SELECT CASE PT.PRODUCT_TYPE_CD
WHEN 'OPT' THEN (SELECT CASE D.DIRECTION_DESC+' '+EXECUTION.CALL_PUT_CD
WHEN 'Buy CALL' THEN 1
WHEN 'Buy PUT' THEN  -1
WHEN 'Sell CALL' THEN  -1
WHEN 'Sell PUT' THEN 1
END)
ELSE (SELECT CASE D.DIRECTION_DESC
WHEN 'Buy' THEN 1
WHEN 'Sell' THEN -1
END)
END)*EXE_QUANTITY*PROD.CONTRACT_SIZE as NET_TRADING_ACTIVITY,
(case when PROD.UNDERLYING_SEC_PRODUCT_KEY IS NULL then PROD.PRODUCT_KEY
   else PROD.UNDERLYING_SEC_PRODUCT_KEY
   end )as UNDERLYING_SEC_PRODUCT_KEY
FROM db_instance_UDM_CDS.V_EXECUTION EXECUTION
JOIN db_instance_UDM_CDS.V_PRODUCT PROD on EXECUTION.PRODUCT_SK = PROD.ENTITY_SK
LEFT JOIN db_instance_UDM_CDS.V_ENTITY UNDER_PROD on ((PROD.UNDERLYING_SEC_PRODUCT_SK = UNDER_PROD.ENTITY_SK) OR (PROD.PRODUCT_KEY = UNDER_PROD.ENTITY_KEY))
JOIN db_instance_UDM_CDS.V_DAY DAYT ON DAYT.DAY_SK = EXECUTION.DAY_SK
LEFT JOIN db_instance_UDM_CDS.V_TRANSACTION_ACTION TA on EXECUTION.TRANSACTION_ACTION_SK=TA.ENTITY_SK
LEFT JOIN db_instance_UDM_CDS.V_DIRECTION D ON (EXECUTION.DIRECTION_SK = D.ENTITY_SK)
LEFT JOIN db_instance_UDM_CDS.V_ACCOUNT ACCOUNT ON (EXECUTION.ACCOUNT_SK = ACCOUNT.ENTITY_SK)
JOIN db_instance_UDM_CDS.ACCOUNT ACCT ON ACCOUNT.ACCOUNT_KEY=ACCT.ACCOUNT_KEY
LEFT JOIN db_instance_UDM_CDS.V_CURRENCY CURR ON (EXECUTION.ORIG_CURR_SK = CURR.ENTITY_SK)
LEFT JOIN db_instance_UDM_CDS.V_EXCHANGE EXCH ON (EXECUTION.EXCHANGE_SK = EXCH.ENTITY_SK)
LEFT JOIN db_instance_UDM_CDS.V_PRODUCT_TYPE PT ON (PROD.PRODUCT_TYPE_SK = PT.ENTITY_SK)
WHERE (PROD.UNDERLYING_SEC_PRODUCT_KEY = @ISIN_ID OR PROD.ISIN_ID = @ISIN_ID)
and (ACCT.ACCOUNT_KEY = @P_ACCOUNT_KEY or ACCT.ACCOUNT_KEY IN (select account_key_temp from @topThreeExecAccount))
and EXECUTION.DAY_SK  in  (select DAY_SK from db_instance_UDM_CDS.EXECUTION where  EXECUTION.EXECUTION_GLOBAL_DATE_TIME  <= @P_ISSUE_DATE_TIME)
and EXECUTION.EXECUTION_GLOBAL_DATE_TIME <= @P_ISSUE_DATE_TIME
and EXECUTION.EXECUTION_GLOBAL_DATE_TIME >= cast( @P_ISSUE_DATE_TIME as date)
   END
   ELSE
   BEGIN
   INSERT INTO @topThreeExecAccount([account_key_temp])
   select ACCOUNT_KEY from db_instance_UDM_CDS.[F_CTS_CROSS_PRODUCT_TRX_AGG_TOP_3_ACCOUNT_EXE](@P_PRODUCT_KEY, @P_ISSUE_DATE_TIME,@UNDERLYING_ISIN);
   INSERT INTO @topThreeOrdAccount([account_key_temp])
   select ACCOUNT_KEY from db_instance_UDM_CDS.[F_CTS_CROSS_PRODUCT_TRX_AGG_TOP_3_ACCOUNT_ORD](@P_PRODUCT_KEY, @P_ISSUE_DATE_TIME,@UNDERLYING_ISIN);
   INSERT INTO @rtnTable
SELECT DISTINCT
(SELECT CASE TA.TRANSACTION_ACTION_CD
WHEN 'NEW' THEN 'New '
WHEN 'MOD' THEN 'Modify '
WHEN 'CAN' THEN 'Cancel '
END) +D.DIRECTION_DESC +' Order' as ICON,
 'Order' as TRX_TYPE,
ORD.MARKET_ORDER_ID as TRANSACTION_ID,
ORD.ORDER_LOCAL_DATE_TIME as LOCAL_DATE_TIME,
PROD.PRODUCT_KEY as PRODUCT_KEY,
ACCOUNT.ACCOUNT_KEY as ACCOUNT_ID,
ORD.ORDER_GLOBAL_DATE_TIME as DATE_TIME,
PROD.SYMBOL as SYMBOL,
D.DIRECTION_DESC as SIDE,
ORD.QUANTITY as QUANTITY,
PT.PRODUCT_TYPE_DESC as ASSET_CLASS,
(SELECT CASE PT.PRODUCT_TYPE_CD
WHEN 'OPT' THEN ORD.ORIG_CURR_STRIKE_PRICE
ELSE ORD.ORIG_CURR_LIMIT_PRICE
END) as PRICE,
CURR.CURRENCY_CD as CCY,
null as COUNTERPARTY, --?
EXCH.EXCHANGE_CD as EXCHANGE,
OT.ORDER_TYPE_DESC as ORDER_TYPE,
TERM.ORDER_TERM_DESC as TIME_IN_FORCE,
ORD.CALL_PUT_CD as CALL_PUT,
QUANTITY*PROD.CONTRACT_SIZE as TOTAL_TRADING_ACTIVITY,
(SELECT CASE PT.PRODUCT_TYPE_CD
WHEN 'OPT' THEN ( SELECT CASE D.DIRECTION_DESC+' '+ORD.CALL_PUT_CD
WHEN 'Buy CALL' THEN 1
WHEN 'Buy PUT' THEN  -1
WHEN 'Sell CALL' THEN  -1
WHEN 'Sell PUT' THEN 1
END)
ELSE (SELECT CASE D.DIRECTION_DESC
WHEN 'Buy' THEN 1
WHEN 'Sell' THEN -1
  END)
END)*QUANTITY*PROD.CONTRACT_SIZE as NET_TRADING_ACTIVITY,
(case when PROD.UNDERLYING_SEC_PRODUCT_KEY IS NULL then PROD.PRODUCT_KEY
   else PROD.UNDERLYING_SEC_PRODUCT_KEY
   end )as UNDERLYING_SEC_PRODUCT_KEY
FROM db_instance_UDM_CDS.V_ORDER_VERSION ORD
JOIN db_instance_UDM_CDS.V_PRODUCT PROD on ORD.PRODUCT_SK = PROD.ENTITY_SK
JOIN db_instance_UDM_CDS.V_PRODUCT INPUT_PROD on INPUT_PROD.PRODUCT_KEY = @P_PRODUCT_KEY
LEFT JOIN db_instance_UDM_CDS.V_ENTITY UNDER_PROD on ((PROD.UNDERLYING_SEC_PRODUCT_SK = UNDER_PROD.ENTITY_SK) OR (PROD.PRODUCT_KEY = UNDER_PROD.ENTITY_KEY))
JOIN db_instance_UDM_CDS.V_DAY DAYT ON DAYT.DAY_SK = ORD.DAY_SK
LEFT JOIN db_instance_UDM_CDS.V_TRANSACTION_ACTION TA on ORD.TRANSACTION_ACTION_SK=TA.ENTITY_SK
LEFT JOIN db_instance_UDM_CDS.V_DIRECTION D ON (ORD.DIRECTION_SK = D.ENTITY_SK)
LEFT JOIN db_instance_UDM_CDS.V_ORDER_TYPE OT ON (ORD.ORDER_TYPE_SK = OT.ENTITY_SK)
LEFT JOIN db_instance_UDM_CDS.V_ORDER_TERM TERM ON (ORD.ORDER_TERM_SK = TERM.ENTITY_SK)
LEFT JOIN db_instance_UDM_CDS.V_ACCOUNT ACCOUNT ON (ORD.ACCOUNT_SK = ACCOUNT.ENTITY_SK)
JOIN db_instance_UDM_CDS.ACCOUNT ACCT ON ACCOUNT.ACCOUNT_KEY=ACCT.ACCOUNT_KEY
LEFT JOIN db_instance_UDM_CDS.V_CURRENCY CURR ON (ORD.ORIG_CURR_SK = CURR.ENTITY_SK)
LEFT JOIN db_instance_UDM_CDS.V_EXCHANGE EXCH ON (ORD.EXCHANGE_SK = EXCH.ENTITY_SK)
LEFT JOIN db_instance_UDM_CDS.V_PRODUCT_TYPE PT ON (PROD.PRODUCT_TYPE_SK = PT.ENTITY_SK)
WHERE (PROD.UNDERLYING_SEC_PRODUCT_KEY = @UNDERLYING_ISIN OR PROD.ISIN_ID = @UNDERLYING_ISIN)
and (ACCT.ACCOUNT_KEY = @P_ACCOUNT_KEY or ACCT.ACCOUNT_KEY in (select account_key_temp from @topThreeOrdAccount))
and ORD.DAY_SK  in  (select DAY_SK from db_instance_UDM_CDS.V_ORDER_VERSION where ORDER_GLOBAL_DATE_TIME  <= @P_ISSUE_DATE_TIME)
and ORD.ORDER_GLOBAL_DATE_TIME <= @P_ISSUE_DATE_TIME
and ORD.ORDER_GLOBAL_DATE_TIME >= cast( @P_ISSUE_DATE_TIME as date)
UNION
SELECT DISTINCT
(SELECT CASE TA.TRANSACTION_ACTION_CD
WHEN 'NEW' THEN 'New '
WHEN 'MOD' THEN 'Modify '
WHEN 'CAN' THEN 'Cancel '
END)+D.DIRECTION_DESC+' Execution' as ICON,
   'Execution' as TRX_TYPE,
EXECUTION.EXECUTION_SOURCE_ID as TRANSACTION_ID,
EXECUTION.EXECUTION_LOCAL_DATE_TIME as LOCAL_DATE_TIME,
PROD.PRODUCT_KEY as PRODUCT_KEY,
ACCOUNT.ACCOUNT_KEY as ACCOUNT_ID,
EXECUTION.EXECUTION_GLOBAL_DATE_TIME as DATE_TIME,
PROD.SYMBOL as SYMBOL,
D.DIRECTION_DESC as SIDE,
EXECUTION.EXE_QUANTITY as QUANTITY,
PT.PRODUCT_TYPE_DESC as ASSET_CLASS,
(SELECT CASE PT.PRODUCT_TYPE_CD
WHEN 'OPT' THEN EXECUTION.ORIG_CURR_STRIKE_PRICE
ELSE EXECUTION.BASE_CURR_EXE_PRICE
END) as PRICE,
CURR.CURRENCY_CD as CCY,
null as COUNTERPARTY, --?
EXCH.EXCHANGE_CD as EXCHANGE,
null as ORDER_TYPE,
null as  TIME_IN_FORCE,
EXECUTION.CALL_PUT_CD as CALL_PUT,
EXE_QUANTITY*PROD.CONTRACT_SIZE as TOTAL_TRADING_ACTIVITY,
(SELECT CASE PT.PRODUCT_TYPE_CD
WHEN 'OPT' THEN (SELECT CASE D.DIRECTION_DESC+' '+EXECUTION.CALL_PUT_CD
WHEN 'Buy CALL' THEN 1
WHEN 'Buy PUT' THEN  -1
WHEN 'Sell CALL' THEN  -1
WHEN 'Sell PUT' THEN 1
END)
ELSE (SELECT CASE D.DIRECTION_DESC
WHEN 'Buy' THEN 1
WHEN 'Sell' THEN -1
END)
END)*EXE_QUANTITY*PROD.CONTRACT_SIZE as NET_TRADING_ACTIVITY,
(case when PROD.UNDERLYING_SEC_PRODUCT_KEY IS NULL then PROD.PRODUCT_KEY
   else PROD.UNDERLYING_SEC_PRODUCT_KEY
   end )as UNDERLYING_SEC_PRODUCT_KEY
FROM db_instance_UDM_CDS.V_EXECUTION EXECUTION
JOIN db_instance_UDM_CDS.V_PRODUCT PROD on EXECUTION.PRODUCT_SK = PROD.ENTITY_SK
LEFT JOIN db_instance_UDM_CDS.V_ENTITY UNDER_PROD on ((PROD.UNDERLYING_SEC_PRODUCT_SK = UNDER_PROD.ENTITY_SK) OR (PROD.PRODUCT_KEY = UNDER_PROD.ENTITY_KEY))
JOIN db_instance_UDM_CDS.V_DAY DAYT ON DAYT.DAY_SK = EXECUTION.DAY_SK
LEFT JOIN db_instance_UDM_CDS.V_TRANSACTION_ACTION TA on EXECUTION.TRANSACTION_ACTION_SK=TA.ENTITY_SK
LEFT JOIN db_instance_UDM_CDS.V_DIRECTION D ON (EXECUTION.DIRECTION_SK = D.ENTITY_SK)
LEFT JOIN db_instance_UDM_CDS.V_ACCOUNT ACCOUNT ON (EXECUTION.ACCOUNT_SK = ACCOUNT.ENTITY_SK)
JOIN db_instance_UDM_CDS.ACCOUNT ACCT ON ACCOUNT.ACCOUNT_KEY=ACCT.ACCOUNT_KEY
LEFT JOIN db_instance_UDM_CDS.V_CURRENCY CURR ON (EXECUTION.ORIG_CURR_SK = CURR.ENTITY_SK)
LEFT JOIN db_instance_UDM_CDS.V_EXCHANGE EXCH ON (EXECUTION.EXCHANGE_SK = EXCH.ENTITY_SK)
LEFT JOIN db_instance_UDM_CDS.V_PRODUCT_TYPE PT ON (PROD.PRODUCT_TYPE_SK = PT.ENTITY_SK)
WHERE (PROD.UNDERLYING_SEC_PRODUCT_KEY = @UNDERLYING_ISIN OR PROD.ISIN_ID = @UNDERLYING_ISIN)
and (ACCT.ACCOUNT_KEY = @P_ACCOUNT_KEY or ACCT.ACCOUNT_KEY IN (select account_key_temp from @topThreeExecAccount))
and EXECUTION.DAY_SK  in  (select DAY_SK from db_instance_UDM_CDS.EXECUTION where  EXECUTION.EXECUTION_GLOBAL_DATE_TIME  <= @P_ISSUE_DATE_TIME)
and EXECUTION.EXECUTION_GLOBAL_DATE_TIME <= @P_ISSUE_DATE_TIME
and EXECUTION.EXECUTION_GLOBAL_DATE_TIME >= cast( @P_ISSUE_DATE_TIME as date)
   END
RETURN
END
go

if exists (select * from sysobjects where name = 'F_CTS_CROSS_PRODUCT_EXEC_AGG')
 drop function db_instance_UDM_CDS.F_CTS_CROSS_PRODUCT_EXEC_AGG
go

create function db_instance_UDM_CDS.F_CTS_CROSS_PRODUCT_EXEC_AGG
(@P_PRODUCT_KEY AS VARCHAR(50),@P_ACCOUNT_KEY AS VARCHAR(50),@P_ISSUE_DATE_TIME AS VARCHAR(50))
RETURNS TABLE
RETURN
SELECT
@P_ISSUE_DATE_TIME as ISSUE_DATE_TIME,
P.SYMBOL as SYMBOL,
F.ACCOUNT_ID as ACCOUNT_ID,
P.CUSTOM_DOUBLE_01 as ADV,
   P.CONTRACT_SIZE as CONTRACT_SIZE,
SUM(NET_TRADING_ACTIVITY) as AGG_NET_TRADING_ACTIVITY,
SUM(TOTAL_TRADING_ACTIVITY) as AGG_TOTAL_TRADING_ACTIVITY,
(SUM(TOTAL_TRADING_ACTIVITY)/P.CUSTOM_DOUBLE_01)*100 as TRADING_ACTIVITY_PCT_OF_ADTV
FROM  db_instance_UDM_CDS.F_CTS_CROSS_PRODUCT_TRX_RECORD(@P_PRODUCT_KEY,@P_ACCOUNT_KEY,@P_ISSUE_DATE_TIME) F
INNER JOIN db_instance_UDM_CDS.V_PRODUCT P ON (P.UNDERLYING_SEC_PRODUCT_KEY=F.UNDERLYING_SEC_PRODUCT_KEY or P.PRODUCT_KEY=F.UNDERLYING_SEC_PRODUCT_KEY and P.SYMBOL = F.SYMBOL)
where TRX_TYPE='Execution'
GROUP BY F.ACCOUNT_ID,P.SYMBOL,P.CUSTOM_DOUBLE_01,P.CONTRACT_SIZE
go

if exists (select * from sysobjects where name = 'V_LINKED_TRANSACTIONS')
 drop view db_instance_UDM_CDS.V_LINKED_TRANSACTIONS
go

create
   VIEW db_instance_UDM_CDS.V_LINKED_TRANSACTIONS (
    ORDER_ID
   , EXECUTION_ID
   , PARENT_ORDER_ID
   , TRADER_ID
   , DIRECTION
   , TRADE_PRICE
   , LIMIT_PRICE
   , ACCOUNT_ID
   , EXCHANGE
   , QUANTITY
   , EXECUTION_DATE_TIME
   , LOCAL_DATE_TIME
   , DATE_TIME
   , PRODUCT_ID
   , SETTLE_DATE
   , CURRENCY
   , CAPACITY
   , NOTIONAL_VALUE2
   , PRINCIPAL_AMOUNT
   , COUPON_RATE
   , MATURITY_DATE
   )
    AS
  SELECT DISTINCT O.MARKET_ORDER_ID as ORDER_ID
   ,NULL as EXECUTION_ID
   ,O.PARENT_ORDER_ID as PARENT_ORDER_ID
   ,ISNULL(T19.REPRESENTATIVE_KEY, (SELECT ENTITY_KEY FROM db_instance_UDM_CDS.ENTITY WHERE ENTITY_SK = O.TRADER_SK) ) AS TRADER_KEY
   ,D.DIRECTION_DESC as DIRECTION
   ,NULL as TRADE_PRICE
   ,O.ORIG_CURR_LIMIT_PRICE as LIMIT_PRICE
   , ISNULL(T1.ACCOUNT_KEY, (SELECT ENTITY_KEY FROM db_instance_UDM_CDS.ENTITY WHERE ENTITY_SK = O.ACCOUNT_SK) ) AS ACCOUNT_ID
   , T8.EXCHANGE_CD as EXCHANGE
   ,O.ORIG_VOLUME as QUANTITY
   ,O.ORDER_GLOBAL_DATE_TIME as EXECUTION_DATE_TIME
   ,O.ORDER_LOCAL_DATE_TIME as LOCAL_DATE_TIME
   ,O.ORDER_GLOBAL_DATE_TIME as DATE_TIME
   ,P.PRODUCT_XREF_ID as PRODUCT_ID
   ,NULL as SETTLE_DATE
   ,T13.CURRENCY_CD as CURRENCY
   ,CA.CAPACITY_DESC as CAPACITY
   ,O.NOTIONAL_VALUE2 as NOTIONAL_VALUE2
   ,O.ORIG_CURR_ORDER_PRIN_AMOUNT as PRINCIPAL_AMOUNT
   ,P.MATURITY_RATE as COUPON_RATE
   ,P.MATURITY_DATE as MATURITY_DATE
   from db_instance_UDM_CDS.ORDER_VERSION O
   LEFT JOIN db_instance_UDM_CDS.DIRECTION D ON (O.DIRECTION_SK = D.ENTITY_SK)
   LEFT JOIN db_instance_UDM_CDS.PRODUCT P ON (O.PRODUCT_SK = P.ENTITY_SK)
   LEFT JOIN db_instance_UDM_CDS.CAPACITY CA ON (O.CAPACITY_SK = CA.ENTITY_SK)
   LEFT OUTER JOIN db_instance_UDM_CDS.REPRESENTATIVE T19 ON O.TRADER_SK = T19.ENTITY_SK
   LEFT OUTER JOIN db_instance_UDM_CDS.CURRENCY T13 ON O.ORIG_CURR_SK = T13.ENTITY_SK
   LEFT OUTER JOIN db_instance_UDM_CDS.ACCOUNT T1 ON O.ACCOUNT_SK = T1.ENTITY_SK
   LEFT OUTER JOIN db_instance_UDM_CDS.EXCHANGE T8 ON O.EXCHANGE_SK = T8.ENTITY_SK
   UNION ALL
     select distinct E.ORDER_ID as ORDER_ID ,
   E.EXECUTION_SOURCE_ID  as EXECUTION_ID,
   NULL as PARENT_ORDER_ID,
   ISNULL(T28.REPRESENTATIVE_KEY, (SELECT ENTITY_KEY FROM db_instance_UDM_CDS.ENTITY WHERE ENTITY_SK = E.TRADER_SK) ) AS REPRESENTATIVE_KEY,
   D.DIRECTION_DESC as DIRECTION,
   E.ORIG_CURR_EXE_PRICE as TRADE_PRICE,
   NULL as LIMIT_PRICE,
   ISNULL(T1.ACCOUNT_KEY, (SELECT ENTITY_KEY FROM db_instance_UDM_CDS.ENTITY WHERE ENTITY_SK = E.ACCOUNT_SK) ) as ACCOUNT_ID,
   T14.EXCHANGE_CD as EXCHANGE,
   E.EXE_QUANTITY as QUANTITY,
   NULL as EXECUTION_DATE_TIME,
   E.EXECUTION_LOCAL_DATE_TIME as LOCAL_DATE_TIME ,
   E.EXECUTION_GLOBAL_DATE_TIME as DATE_TIME,
   P.PRODUCT_XREF_ID as PRODUCT_ID,
   E.SETTLE_DATE as SETTLE_DATE,
   T21.CURRENCY_CD as CURRENCY,
   CA.CAPACITY_DESC as CAPACITY ,
   E.NOTIONAL_VALUE2 as NOTIONAL_VALUE2,
   E.ORIG_CURR_PRIN_AMOUNT as PRINCIPAL_AMOUNT,
   P.MATURITY_RATE as COUPON_RATE ,
   P.MATURITY_DATE as MATURITY_DATE
   from db_instance_UDM_CDS.EXECUTION E
   LEFT JOIN db_instance_UDM_CDS.PRODUCT P ON (E.PRODUCT_SK = P.ENTITY_SK)
   LEFT JOIN db_instance_UDM_CDS.CAPACITY CA ON (E.CAPACITY_SK = CA.ENTITY_SK)
   LEFT JOIN db_instance_UDM_CDS.DIRECTION D ON (E.DIRECTION_SK = D.ENTITY_SK)
   LEFT OUTER JOIN db_instance_UDM_CDS.CURRENCY T21 ON E.ORIG_CURR_SK = T21.ENTITY_SK
   LEFT OUTER JOIN db_instance_UDM_CDS.REPRESENTATIVE T28 ON E.TRADER_SK = T28.ENTITY_SK
   LEFT OUTER JOIN db_instance_UDM_CDS.ACCOUNT T1 ON E.ACCOUNT_SK = T1.ENTITY_SK
   LEFT OUTER JOIN db_instance_UDM_CDS.EXCHANGE T14 ON E.EXCHANGE_SK = T14.ENTITY_SK;